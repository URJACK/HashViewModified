!!!
%html
  %header
    %script(src="/js/my.js")
    
    - if @opid != nil
      :javascript
        //"time-span", which means how much time-span you have to request data per time
        let timeSpan = 5000;
        let PageSize = 5;
        let clock,tbody;
        //these indexs means the right locations of datas in the web view(packets_index.haml); 
        let ID_INDEX = 0;
        let STARTTIME_INDEX = 1;
        let STOPTIME_INDEX = 2;
        let SRCIP_INDEX = 3;
        let DSTIP_INDEX = 4;
        let SRCPORT_INDEX = 5;
        let DSTPORT_INDEX = 6;
        let PACKETS_INDEX = 7;
        let PROTOCOLS_INDEX = 8;
        //let SESSIONID_INDEX = 9;
        //let INDEXNAME_INDEX = 10;
        //let INFO_INDEX = 11;
        //let PCAPPATH_INDEX = 12;
        //let TYPE_INDEX = 13;
        //let PCAPPATH_INDEX = 9;
        let TYPE_INDEX = 9;
        //element 'tr' will add data as its children
        let trAppendTh = function(tr,data){
          let th = document.createElement('th');
          th.innerHTML = data;
          tr.appendChild(th)
        }
        let thAppendA = function(th,className,url,data){
          let a = document.createElement('a');
          a.className = className;
          a.href = url
          a.innerHTML = data
          th.appendChild(a)
        }
        let refreshViewByTheData = function(datas){
          for(let i = 0 ; i < datas.length ; ++i){
            element = document.getElementById(datas[i].id)
            console.log(element)
            //to find the data which is needed to be changed
            if(element != null){
              element.children[ID_INDEX].innerText = datas[i].id;
              //element.children[STARTTIME_INDEX].innerText = formZtoUTC(datas[i].starttime)
              //element.children[STOPTIME_INDEX].innerText = formZtoUTC(datas[i].stoptime)
              element.children[STARTTIME_INDEX].innerText = datas[i].starttime
              element.children[STOPTIME_INDEX].innerText = datas[i].stoptime
              element.children[SRCIP_INDEX].innerText = datas[i].srcip;
              element.children[SRCPORT_INDEX].innerText = datas[i].srcport;
              element.children[DSTIP_INDEX].innerText = datas[i].dstip;
              element.children[DSTPORT_INDEX].innerText = datas[i].dstport;
              element.children[PACKETS_INDEX].innerText = datas[i].packets;
              element.children[PROTOCOLS_INDEX].innerText = datas[i].protocols;
              //element.children[SESSIONID_INDEX].innerText = datas[i].sessionid;
              //element.children[INDEXNAME_INDEX].innerText = datas[i].indexname;
              //element.children[INFO_INDEX].innerText = datas[i].info;
              //element.children[PCAPPATH_INDEX].innerText = datas[i].pcappath;
              element.children[TYPE_INDEX].innerText = datas[i].type;
            }else{
              //it means that the datas didn't fill the view up.In other words,it can be filled with other datas
              if(tbody.childElementCount < PageSize){
                let tr = document.createElement('tr');
                tr.id = datas[i].id
                trAppendTh(tr,datas[i].id);
                trAppendTh(tr,datas[i].starttime);
                trAppendTh(tr,datas[i].stoptime);
                trAppendTh(tr,datas[i].srcip);
                trAppendTh(tr,datas[i].dstip);
                trAppendTh(tr,datas[i].srcport);
                trAppendTh(tr,datas[i].dstport);
                trAppendTh(tr,datas[i].packets);
                trAppendTh(tr,datas[i].protocols);
                //trAppendTh(tr,datas[i].pcappath);
                trAppendTh(tr,datas[i].type);

                let th = document.createElement('th')
                thAppendA(th,"btn btn-warning","/packets/edit?opid=#{@opid}&id=" + datas[i].id,"Edit")
                tr.appendChild(th);

                th = document.createElement('th')
                thAppendA(th,"btn btn-danger","/packets/delete?opid=#{@opid}&id=" + datas[i].id,"Delete")
                tr.appendChild(th);
                tbody.appendChild(tr);
              }
            }
          }
        }
        let getDataFromServer = function(){
          console.log("I'm going to get data from the server");
          $.ajax({
            url:"/packets/refresh",
            data:null,
            method:"POST",
            success:function(data){
              if(typeof data != "object"){
                data = JSON.parse(data);
              }
              refreshViewByTheData(data)
            },
            error:function(){
              clearInterval(clock)
            }
          })
        }
        clock = setInterval(getDataFromServer,timeSpan)
        window.onload = function(){
          tbody = document.getElementById("table").children[1]
          if(tbody == null){
            tbody = document.createElement('tbody');
            document.getElementById("table").appendChild(tbody)
          }
        }

    - if @opid == nil
      :javascript
        //this value has the relationship with the html content,if you want to change the content in this array,you probably need to change the content located in this page's HTML
        let methodStrings = ["Method_A","Method_B","Method_C"]
        let oMethod,oSelect;
        //after each 10 seconds, this is page will try to get new data from the server
        let gatherMethodChange = function(index){
          oSelect.innerHTML = methodStrings[index];
          oMethod.value = index;
        }
        window.onload = function(){
          oSelect = document.getElementById('oSelect');
          oMethod = document.getElementById('oMethod');
          oMethod.value = 0;
          console.log("selection index has been initialized as 'zero'")

          tbody = document.getElementById("table").children[1]
          if(tbody == null){
            tbody = document.createElement('tbody');
            document.getElementById("table").appendChild(tbody)
          }
          //console.log(tbody.children)
          //console.log("debug","fakeData")
          //refreshViewByTheData(fakeData)
        }
  %body
    .container
      - if @opid == nil
        %h1 Homepage
      - else
        %h1 Homepage > Operation: #{@opid}
      - if @opid == nil
        %form{'accept-charset' => "UTF-8",action: "/packets/gather",method: "post"}
          %div.btn-group
            %div{"class" => "btn-group", "role" => "group"}
              %button{'class' => 'btn btn-defualt dropdown-toggle', 'type' => 'button','id' => 'oSelect', 'data-toggle' => 'dropdown', 'aria-haspopup' => 'true','aria-expanded' => 'true'} Method_A
              %ul{"class" => "dropdown-menu", "aria-labelledby" => "oSelect"}
                %li
                  %a{'href' => '#',"onclick" => "gatherMethodChange(0)"} Method_A
                %li
                  %a{'href' => '#',"onclick" => "gatherMethodChange(1)"} Method_B
                %li{'role' => 'separator', 'class' => 'divider'}
                %li
                  %a{'href' => '#',"onclick" => "gatherMethodChange(2)"} Method_C
            %input{"type" => "hidden","name" => "methodindex","id" => "oMethod"}
            %button{"class" => "btn btn-default"} Start New Gathering
        %br
      %form{'accept-charset' => "UTF-8",action: "/packets/search",method: "get"}
        %div.input-group
          %span.input-group-addon Input ip or port
          %input{name: "opid",type: "hidden",value: "#{@opid}"}
          %input{name: "data",type: "text",class: "form-control"}
          %span.input-group-btn
            %input{type: "submit",value: "Search",class:"btn btn-default"}
      %br
      %table.table.table-bordered.table-hover{"id" => "table"}
        %thead
          %tr
            %th id
            %th starttime
            %th stoptime
            %th srcip
            %th dstip
            %th srcport
            %th dstport
            %th packets
            %th protocols
            -# %th sessionid
            -# %th indexname
            -# %th info
            -# %th pcappath
            %th type
            %th{colspan: "2"}
        - @netpackets.each do |packet|
          %tr{"id" => "#{packet.id}"}
            %th #{packet.id}
            %th #{packet.starttime}
            %th #{packet.stoptime}
            %th #{packet.srcip}
            %th #{packet.dstip}
            %th #{packet.srcport}
            %th #{packet.dstport}
            %th #{packet.packets}
            %th #{packet.protocols}
            -# %th #{packet.sessionid}
            -# %th #{packet.indexname}
            -# %th #{packet.info}
            -# %th #{packet.pcappath}
            %th #{packet.type}
            %th
              %a{href: "/packets/edit?opid=#{@opid}&id=#{packet.id}",class: "btn btn-warning"} Edit
            %th
              %a{href: "/packets/delete?opid=#{@opid}&id=#{packet.id}",class: "btn btn-danger"} Delete
      - if @opid == nil then basicChangeUrl = "/packets?page="
      - else basicChangeUrl = "/packets?opid=#{@opid}&page="
      %p
        - if @pageid > 1
          %a{href: "#{basicChangeUrl}#{@pageid - 1}",class: "btn btn-warning"} Left
        - else
          %a{href: "#{basicChangeUrl}#{@pageid}",class: "btn btn-default"} Left
        %span.label.label-info #{@pageid}
        %a{href: "#{basicChangeUrl}#{@pageid + 1}",class: "btn btn-danger"} Right

      - if @opid != nil
        %a{href: "/packets/new?opid=#{@opid}",class: "btn btn-warning"} Add a new packet
        %a{href: "/packets",class: "btn btn-primary"} Back